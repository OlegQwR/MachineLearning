import cv2
import numpy as np

# cap = cv2.VideoCapture('videos/vid.mp4')
#
#
# while True:  #
#     success, img = cap.read()
#
# #начало оптимизации картинок видио
#     img = cv2.GaussianBlur(img, (9, 9), 0)  # размытие картинки
#     img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # изменение формата картинки(изменение кол-ва слоёв)
#     img = cv2.Canny(img, 25, 25) # перевод картинки в бинарный код(нахождение углов)
#
#     kernel = np.ones((3, 3), np.uint8)  # создаём матрицу
#     img = cv2.dilate(img, kernel, iterations=1) # увеличил жирность контура обводки
#     img = cv2.erode(img, kernel, iterations=1) # уменьшение жирности контура обводки
# #конец оптимизации картинок видио
#
#     cv2.imshow('Result', img)
#
#     # if cv2.waitKey(1) == ord('q'):
#     #     break
#     if cv2.waitKey(1) & 0xFF == ord('q'): #закрывает воспроизведение видео
#         break


img = cv2.imread('images/car.jpg')
# #img = cv2.flip(img, 1) # отзеркалили картинки по горизонтлаи
#
# #функция для врашения картинки
# def rotate(img_param, angle):
#     height, width =img.shape[:2]
#     point = (width // 2, height // 2)
#     mat = cv2.getRotationMatrix2D(point, angle, 1)
#     return cv2.warpAffine(img_param, mat, (width, height))
#
# #img = rotate(img, 90) #повернул картинку на 90 градусов
#
# #функция для смещения картинки
# def tranform(img_param, x, y):
#     mat = np.float32([[1, 0, x], [0, 1, y]])
#     return cv2.warpAffine(img_param, mat, (img_param.shape[1], img_param.shape[0]))
#
# img = tranform(img, 30, 200)

new_img = np.zeros(img.shape, dtype='uint8') # создал новое полотно

img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) #уонвертирую в серый формат
img = cv2.GaussianBlur(img, (5, 5), 0)
img = cv2.Canny(img, 100, 140) # сделал изображение бинарным

con, hir = cv2.findContours(img, cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE) #нахожу контуры
cv2.drawContours(new_img, con, -1, (123, 32, 234), 1)#нарисовал новую картинку по координатм контуров найдённих выше

cv2.imshow('Result', new_img)

#cv2.imshow('Result', img)
cv2.waitKey(0)

